generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int             @id @default(autoincrement())
  role           UserRole        @default(USER)
  grade          UserGrade       @default(NORMAL)
  nickname       String          @unique @db.VarChar(10)
  email          String          @unique @db.VarChar(255)
  password       String          @db.VarChar(255)
  refreshToken   String?
  tokenUpdatedAt DateTime?
  lastLoginAt    DateTime?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  joinCount      Int             @default(0)
  bestCount      Int             @default(0)
  Challenge      Challenge[]
  feedbacks      Feedback[]
  likes          Like[]
  notifications  Notification[]
  participations Participation[]
  works          Work[]
  replies        Reply[]
  image          String?
}

model Challenge {
  id              Int               @id @default(autoincrement())
  userId          Int
  title           String            @db.VarChar(200)
  field           ChallengeField
  docType         DocType
  description     String
  docUrl          String            @db.VarChar(200)
  deadline        DateTime
  progress        Boolean           @default(false)
  participants    Int               @default(0)
  maxParticipants Int?
  status          ApplicationStatus @default(WAITING)
  message         String?           @db.VarChar(200)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  user            User              @relation(fields: [userId], references: [id])
  notifications   Notification[]
  participations  Participation[]
  works           Work[]
}

model Participation {
  id          Int       @id @default(autoincrement())
  userId      Int
  challengeId Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  challenge   Challenge @relation(fields: [challengeId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
}

model Work {
  id            Int            @id @default(autoincrement())
  userId        Int
  challengeId   Int
  content       String?
  updatedAt     DateTime       @updatedAt
  createdAt     DateTime       @default(now())
  likeCount     Int            @default(0)
  feedbacks     Feedback[]     @relation("WorkFeedbacks")
  likes         Like[]         @relation("WorkLikes")
  notifications Notification[]
  challenge     Challenge      @relation(fields: [challengeId], references: [id])
  user          User           @relation(fields: [userId], references: [id])
}

model Feedback {
  id            Int            @id @default(autoincrement())
  userId        Int
  workId        Int
  content       String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  user          User           @relation(fields: [userId], references: [id])
  work          Work           @relation("WorkFeedbacks", fields: [workId], references: [id], onDelete: Cascade)
  notifications Notification[]
  replies       Reply[]
}

model Reply {
  id         Int      @id @default(autoincrement())
  userId     Int
  feedbackId Int
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  feedback   Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int
  workId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  work      Work     @relation("WorkLikes", fields: [workId], references: [id], onDelete: Cascade)

  @@unique([userId, workId])
}

model Notification {
  id          Int              @id @default(autoincrement())
  userId      Int
  type        NotificationType
  content     String
  relatedId   Int?
  isRead      Boolean          @default(false)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  challengeId Int?
  workId      Int?
  feedbackId  Int?
  challenge   Challenge?       @relation(fields: [challengeId], references: [id])
  feedback    Feedback?        @relation(fields: [feedbackId], references: [id])
  user        User             @relation(fields: [userId], references: [id])
  work        Work?            @relation(fields: [workId], references: [id])
}

enum UserRole {
  USER
  ADMIN
}

enum UserGrade {
  NORMAL
  EXPERT
}

enum ChallengeField {
  NEXTJS
  API
  CAREER
  MODERNJS
  WEB
}

enum DocType {
  OFFICIAL
  BLOG
}

enum ApplicationStatus {
  WAITING
  ACCEPTED
  REJECTED
  DELETED
}

enum NotificationType {
  CHANGE
  STATUS
  NEW_WORK
  NEW_FEEDBACK
  DEADLINE
  ADMIN_ACTION
  NEW_REPLY // 새로 추가된 알림 유형
}
