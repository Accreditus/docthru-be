// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum UserGrade {
  NORMAL
  EXPERT
}

enum ChallengeField {
  NEXTJS
  API
  CAREER
  MODERNJS
  WEB
}

enum DocType {
  OFFICIAL
  BLOG
}

enum ApplicationStatus {
  WAITING
  ACCEPTED
  REJECTED
  DELETED
}

enum NotificationType {
  CHANGE
  STATUS
  NEW_WORK
  NEW_FEEDBACK
  DEADLINE
  ADMIN_ACTION
}

model User {
  id             Int           @id @default(autoincrement())
  role           UserRole      @default(USER)
  grade          UserGrade?
  nickname       String        @unique @db.VarChar(10)
  email          String        @unique @db.VarChar(255)
  password       String        @db.VarChar(255)
  refreshToken   String?       @db.Text
  createdAt      DateTime      @default(now())
  applications   Application[]
  participations Participate[]
  works          Work[]
  feedbacks      Feedback[]
  likes          Like[]
  notifications  Notification[]
}

model Challenge {
  id              Int           @id @default(autoincrement())
  title           String        @db.VarChar(200)
  field           ChallengeField
  docType         DocType
  description     String        @db.Text
  docUrl          String        @db.VarChar(200)
  deadline        DateTime
  progress        Boolean       @default(false)
  participates    Int?
  maxParticipates Int?
  applications    Application[]
  participations  Participate[]
  works           Work[]
  notifications   Notification[]
}

model Application {
  id                   Int               @id @default(autoincrement())
  user                 User              @relation(fields: [userId], references: [id])
  userId               Int
  challenge            Challenge         @relation(fields: [challengeId], references: [id])
  challengeId          Int               @unique
  status               ApplicationStatus @default(WAITING)
  appliedAt            DateTime          @default(now())
  invalidationComment  String?           @db.VarChar(200)
  invalidatedAt        DateTime?
}

model Participate {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  challenge   Challenge @relation(fields: [challengeId], references: [id])
  challengeId Int
}

model Work {
  id              Int           @id @default(autoincrement())
  user            User          @relation(fields: [userId], references: [id])
  userId          Int
  challenge       Challenge     @relation(fields: [challengeId], references: [id])
  challengeId     Int
  content     String?       @db.Text
  lastModifiedAt  DateTime      @updatedAt
  isSubmitted     Boolean       @default(false)
  submittedAt     DateTime?
  feedbacks       Feedback[]
  likes           Like[]    
  likeCount       Int           @default(0)
  notifications   Notification[]
}

model Feedback {
  id            Int           @id @default(autoincrement())
  user          User          @relation(fields: [userId], references: [id])
  userId        Int
  work          Work          @relation(fields: [workId], references: [id])
  workId        Int
  content       String        @db.Text
  createdAt     DateTime      @default(now())
  notifications Notification[]
}

model Like {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  work      Work     @relation(fields: [workId], references: [id])
  workId    Int
  createdAt DateTime @default(now())

  @@unique([userId, workId])
}

model Notification {
  id          Int               @id @default(autoincrement())
  user        User              @relation(fields: [userId], references: [id])
  userId      Int
  type        NotificationType
  content     String
  relatedId   Int?     
  isRead      Boolean           @default(false)
  createdAt   DateTime          @default(now())
  challenge   Challenge?        @relation(fields: [challengeId], references: [id])
  challengeId Int?
  work        Work?             @relation(fields: [workId], references: [id])
  workId      Int?
  feedback    Feedback?         @relation(fields: [feedbackId], references: [id])
  feedbackId  Int?
}